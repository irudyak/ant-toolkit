<project xmlns:unless="ant:unless">
	<!-- Check necessary prerequisites required to use HeadlessComposer -->
	<macrodef name="dm.checkHeadlessComposer">
		<sequential>
			<generalIf arg1="${g:HEADLESS-COMPOSER-ALREADY-RESOLVED}" condition="!=" arg2="true">

				<!-- Configure headless-composer location & check that it exists -->
				<generalCondition property="headless-composer.root.dir" value="${ENV.HEADLESS_COMPOSER_HOME}">
					<and>
						<not>
							<isset property="headless-composer.root.dir"/>
						</not>

						<isset property="ENV.HEADLESS_COMPOSER_HOME"/>
					</and>
				</generalCondition>

				<generalIf arg1="${headless-composer.root.dir}" arg2="$${headless-composer.root.dir}" condition="!=">
					<generalGetFileFullPath file="${headless-composer.root.dir}" property="headless-composer.root.dir"/>
				</generalIf>

				<generalCondition property="headless-composer.root.dir"
								  value="${headless-composer.root.dir}"
								  else="${profile-resolution.basedir}/../headless-composer">
					<available file="${headless-composer.root.dir}" type="dir"/>
				</generalCondition>

				<generalGetFileFullPath file="${headless-composer.root.dir}" property="headless-composer.root.dir"/>

				<fail message="Failed to find HeadlessComposer location. Either headless-composer.root.dir Ant property or HEADLESS_COMPOSER_HOME environment variable should be specified">
					<condition>
						<not>
							<available file="${headless-composer.root.dir}" type="dir"/>
						</not>
					</condition>
				</fail>

				<property name="headless-composer.plugins.dfc.dir" value="${headless-composer.root.dir}/plugins/com.emc.ide.external.dfc_1.0.0/documentum.config"/>

				<fail message="Failed to find HeadlessComposer in location: ${headless-composer.root.dir}">
					<condition>
						<not>
							<available file="${headless-composer.plugins.dfc.dir}" type="dir"/>
						</not>
					</condition>
				</fail>

				<!-- Copy DFC configuration from profile to headless-composer DFC dir -->
				<copy file="${profile.dir}/dfc.properties" todir="${headless-composer.plugins.dfc.dir}" overwrite="true" force="true" />
				<copy file="${profile.dir}/log4j.properties" todir="${headless-composer.plugins.dfc.dir}" overwrite="true" force="true"/>

				<generalProperty name="g:HEADLESS-COMPOSER-ALREADY-RESOLVED" value="true"/>
			</generalIf>
		</sequential>
	</macrodef>

	<!-- Defining macros for DAR installation -->
	<macrodef name="dm.istallDar">
		<attribute name="darFile"/>
		<attribute name="references" default=""/>
		<sequential>

			<dm.checkHeadlessComposer/>

			<dm.getDocbaseCredentials docbaseProperty="docbaseName"
									 loginProperty="docbaseLogin"
									 passwordProperty="docbasePassword"/>

			<fail message="Docbase name wasn't previously specified">
				<condition>
					<or>
						<not><isset property="docbaseName"/></not>
						<equals arg1="${docbaseName}" arg2=""/>
					</or>
				</condition>
			</fail>

			<fail message="Docbase login wasn't previously specified">
				<condition>
					<or>
						<not><isset property="docbaseLogin"/></not>
						<equals arg1="${docbaseLogin}" arg2=""/>
					</or>
				</condition>
			</fail>

			<fail message="Docbase password wasn't previously specified">
				<condition>
					<or>
						<not><isset property="docbasePassword"/></not>
						<equals arg1="${docbasePassword}" arg2=""/>
					</or>
				</condition>
			</fail>

			<generalInitMap name="g:INSTALLED_DARS" ignoreIfExist="true"/>

			<generalCheckMapContainsKey map="g:INSTALLED_DARS" key="${docbaseName}-@{darFile}" property="__isAlreadyInstalled__"/>

			<generalIf arg1="${__isAlreadyInstalled__}" condition="=" arg2="true">
				<echo>[DAR-ALREADY-INSTALLED] @{darFile} archive was already installed</echo>
			</generalIf>

			<generalIf arg1="${__isAlreadyInstalled__}" condition="!=" arg2="true">

				<generalTimeStamp>
					<format property="__dar.install.start" pattern="MM/dd/yyyy hh:mm:ss aaa" locale="en,US"/>
				</generalTimeStamp>

				<generalTimeStamp>
					<format property="__dar.install.log.start" pattern="MM-dd-yyyy-hh-mm-ss-aaa" locale="en,US"/>
				</generalTimeStamp>

				<generalProperty name="darLogFile" value="dar-inst-${__dar.install.log.start}.log"/>

				<generalIf arg1="${DEPLOYMENT_LOGS_DIR}" condition="!=" arg2="$${DEPLOYMENT_LOGS_DIR}">
					<generalProperty name="darLogFile" value="${DEPLOYMENT_LOGS_DIR}/dar-inst-${__dar.install.log.start}.log"/>
				</generalIf>

				<echo>[START-DAR-INSTALL] Start installing DAR archive @{darFile} at ${__dar.install.start}. Installation log: ${darLogFile}</echo>
				<echo>Using HeadlessComposer: ${headless-composer.root.dir}</echo>

				<delete dir="${basedir}/darInstallTemp" quiet="true"/>
				<mkdir dir="${basedir}/darInstallTemp"/>

				<delete file="${basedir}/dar-installation.xml" quiet="true"/>

				<echo file="${basedir}/dar-installation.xml" append="true" encoding="UTF-8"><![CDATA[<?xml version="1.0"?>]]></echo>
				<echo file="${basedir}/dar-installation.xml" append="true" encoding="UTF-8"></echo>
				<echo file="${basedir}/dar-installation.xml" append="true" encoding="UTF-8"><![CDATA[<project name="install-dar" basedir="." default="install">]]></echo>
				<echo file="${basedir}/dar-installation.xml" append="true" encoding="UTF-8"></echo>
				<echo file="${basedir}/dar-installation.xml" append="true" encoding="UTF-8"><![CDATA[	<target name="install">]]></echo>

				<generalIf arg1="@{references}" condition="!=" arg2="">
					<generalInitArray name="referenceDars" values="@{references}" trimValues="true" removeEmptyValues="true"/>
					<generalArrayLoop array="referenceDars" elementProperty="refDar">
						<echo file="${basedir}/dar-installation.xml" append="true" encoding="UTF-8"></echo>
						<echo file="${basedir}/dar-installation.xml" append="true" encoding="UTF-8"><![CDATA[		<emc.install docbase="$${docbase}" username="$${user}" password="$${password}" dar="${refDar}"/>]]></echo>
					</generalArrayLoop>
				</generalIf>

				<echo file="${basedir}/dar-installation.xml" append="true" encoding="UTF-8"></echo>
				<echo file="${basedir}/dar-installation.xml" append="true" encoding="UTF-8"><![CDATA[		<emc.install docbase="$${docbase}" username="$${user}" password="$${password}" dar="$${dar}"/>]]></echo>

				<echo file="${basedir}/dar-installation.xml" append="true" encoding="UTF-8"></echo>
				<echo file="${basedir}/dar-installation.xml" append="true" encoding="UTF-8"><![CDATA[	</target>]]></echo>
				<echo file="${basedir}/dar-installation.xml" append="true" encoding="UTF-8"></echo>
				<echo file="${basedir}/dar-installation.xml" append="true" encoding="UTF-8"><![CDATA[</project>]]></echo>

				<java fork="true" maxmemory="1024m" failonerror="false" errorproperty="javaError" resultproperty="javaResult" dir="${basedir}" classname="org.eclipse.equinox.launcher.Main">
					<classpath>
						<pathelement location="${headless-composer.root.dir}/startup.jar"/>
						<fileset dir="${headless-composer.root.dir}/plugins">
							<include name="org.eclipse.equinox.launcher_*.jar"/>
						</fileset>
					</classpath>

					<jvmarg line="-Ddocbase=${docbaseName} -Duser=${docbaseLogin} -Dpassword=${docbasePassword} -Dlogpath=&quot;${darLogFile}&quot; -Ddar=&quot;@{darFile}&quot;"/>
					<jvmarg value="-Dfile.encoding=UTF-8"/>
					<jvmarg value="-Dclient.encoding.override=UTF-8"/>
					<arg line="-data &quot;darInstallTemp&quot; -application org.eclipse.ant.core.antRunner -buildfile dar-installation.xml"/>
				</java>

				<fail message="Error occured during dar archive installation: ${javaError}">
					<condition>
						<not>
							<equals arg1="${javaResult}" arg2="0"/>
						</not>
					</condition>
				</fail>

				<delete dir="${basedir}/darInstallTemp" quiet="true"/>
				<delete file="${basedir}/dar-installation.xml" quiet="true"/>

				<generalTimeStamp>
					<format property="__dar.install.finish" pattern="MM/dd/yyyy hh:mm:ss aaa" locale="en,US"/>
				</generalTimeStamp>

				<generalTimeDifference time1="${__dar.install.start}" time2="${__dar.install.finish}" timeFormat="MM/dd/yyyy hh:mm:ss aaa" locale="en,US"
									   differenceUnits="m" property="__dar.install.duration"/>

				<generalPutMapElement map="g:INSTALLED_DARS" key="${docbaseName}-@{darFile}" value="1"/>

				<echo>[FINISHED-DAR-INSTALL] Finished installing DAR archive @{darFile} at ${__dar.install.finish}, duration: ${__dar.install.duration} min</echo>

			</generalIf>

		</sequential>
	</macrodef>

	<!-- Defining macros for DQL -->
	<macrodef name="dm.runDqlScriptOnlyOnce">
		<attribute name="transactional" default="true"/>
		<attribute name="file"/>
		<attribute name="delimiter" default=";"/>
		<attribute name="commentDelimiter" default="#"/>

		<sequential>
			<generalInitMap name="g:EXECUTED_DQL_SCRIPTS" ignoreIfExist="true"/>

			<dm.getDocbaseCredentials docbaseProperty="docbaseName"
									 loginProperty="docbaseLogin"
									 passwordProperty="docbasePassword"/>

			<generalCheckMapContainsKey mapname="g:EXECUTED_DQL_SCRIPTS" key="${docbaseName}-@{file}" property="__isAlreadyExecutedDql__"/>

			<generalIf arg1="${__isAlreadyExecutedDql__}" condition="=" arg2="true">
				<echo>[DQL-SCRIPT-WAS-ALREADY-EXECUTED] @{file} script was already executed</echo>
			</generalIf>

			<generalIf arg1="${__isAlreadyExecutedDql__}" condition="!=" arg2="true">
				<echo>[START-EXECUTING-DQL-SCRIPT] Start execution of @{file} DQL script</echo>

				<generalTimeStamp>
					<format property="__dql.start.time__" pattern="MM/dd/yyyy hh:mm:ss aaa" locale="en,US"/>
				</generalTimeStamp>

				<generalIf arg1="@{transactional}" condition="=" arg2="true">
					<dm.startTransaction/>
				</generalIf>

				<dm.dql file="@{file}" delimiter="@{delimiter}" commentDelimiter="@{commentDelimiter}"/>

				<generalIf arg1="@{transactional}" condition="=" arg2="true">
					<dm.commitTransaction/>
				</generalIf>

				<generalTimeStamp>
					<format property="__dql.finish.time__" pattern="MM/dd/yyyy hh:mm:ss aaa" locale="en,US"/>
				</generalTimeStamp>

				<generalTimeDifference time1="${__dql.start.time__}" time2="${__dql.finish.time__}" timeFormat="MM/dd/yyyy hh:mm:ss aaa" locale="en,US"
									   differenceUnits="m" property="__dql.duration.time__"/>


				<generalPutMapElement map="g:EXECUTED_DQL_SCRIPTS" key="${docbaseName}-@{file}" value="1"/>

				<echo>[FINISHED-EXECUTING-DQL-SCRIPT] Finished executing DQL script @{file}, duration: ${__dql.duration.time__} min</echo>
			</generalIf>
		</sequential>
	</macrodef>
</project>