<project basedir=".">

	<property file="svnTargets.properties"/>

	<path id="svnAnt.classpath">
	  <pathelement location="${svnjavahl.jar}" />
	  <pathelement location="${svnant.jar}" />
	  <pathelement location="${svnClientAdapter.jar}" />
	</path>

	<path id="svnTasks.classpath">
	  <pathelement location="${svn.anttoolkit.jar}" />
	</path>

	<path id="generalTasks.classpath">
	  <pathelement location="${general.anttoolkit.jar}" />
	</path>

	<taskdef file="${svn.anttoolkit.taskdef}" classpathref="svnTasks.classpath"/>
	<taskdef file="${general.anttoolkit.taskdef}" classpathref="generalTasks.classpath"/>
	<taskdef file="${svn.antsubversion.taskdef}" classpathref="svnAnt.classpath"/>

	<target name="createReport" depends="getSvnLog">
		<svn.logReport logFile="${svn.report.logFile}"
		              reportFile="${svn.report.reportFile}"
		              xsltStyle="${svn.report.stylesheet}"/>

		<delete file="${svn.report.logFile}"/>
	</target>

	<target name="getRepositoryHeadRevision">
		<exec executable="svn" output="${svn.report.infoFile}">
			<arg value="info"/>
			<arg value="-r"/>
			<arg value="HEAD"/>
			<arg value="--xml"/>
			<arg value="--username"/>
			<arg value="${svn.username}"/>
			<arg value="--password"/>
			<arg value="${svn.password}"/>
			<arg value="${svn.repository}"/>
		</exec>

		<svn.getRevision infoFile="${svn.report.infoFile}"
		              property="svn.repository.headRevision"/>
	</target>

	<target name="getCurrentBuildRevision">
		<exec executable="svn" output="${svn.report.logFile}">
			<arg value="log"/>
			<arg value="--xml"/>
			<arg value="-r"/>
			<arg value="1:HEAD"/>
			<arg value="--username"/>
			<arg value="${svn.username}"/>
			<arg value="--password"/>
			<arg value="${svn.password}"/>
			<arg value="${svn.repository}/${svn.report.MainModule}"/>
		</exec>

		<svn.getLatestMessageRevision logFile="${svn.report.logFile}"
				messagePattern="${svn.report.version.pattern}"
				property="svn.report.version.revision"/>

		<condition property="svn.report.version.revision"
		           value="${svn.report.version.revision}"
		           else="0">
			<isset property="svn.report.version.revision"/>
		</condition>

		<delete file="${svn.report.logFile}"/>
	</target>

	<target name="getSvnLog" depends="getRepositoryHeadRevision, getCurrentBuildRevision">
		<general.add arg1="${svn.report.version.revision}" arg2="1" property="svn.report.version.revision"/>

		<exec executable="svn" output="${svn.report.logFile}">
			<arg value="log"/>
			<arg value="-r"/>
			<arg value="${svn.report.version.revision}:${svn.repository.headRevision}"/>
			<arg value="-v"/>
			<arg value="--xml"/>
			<arg value="--username"/>
			<arg value="${svn.username}"/>
			<arg value="--password"/>
			<arg value="${svn.password}"/>
			<arg value="${svn.repository}"/>
			<arg value="${svn.report.MainModule}"/>
			<arg value="${svn.report.ExternalModules}"/>
		</exec>
	</target>

	<target name="setExternalsToCurrentRevision">

		<svn.getRevision infoFile="${svn.report.infoFile}"
		              property="svn.repository.headRevision"/>

		<delete file="${svn.report.infoFile}"/>
		
		<general.initArray name="externalPaths"
		                  file="${svn.externals.paths.File}"
		                  separator="${svn.externals.paths.separator}"
		                  trimValues="true"
		                  arrayLengthProperty="svn.externals.count"
		                  removeEmptyValues="true"/>

		<general.initArray name="externalValues"
		                  file="${svn.externals.values.File}"
		                  separator="${svn.externals.values.separator}"
		                  trimValues="true"
		                  removeEmptyValues="true"/>

		<condition property="svn.externals.hasAnyExternals"
		           value="false"
		           else="true">
			<equals arg1="${svn.externals.count}" arg2="0"/>
		</condition>

		<svn username="${svn.username}" password="${svn.password}">
			<update dir="${svn.checkout.rootDirectory}/${svn.checkout.MainModule}" recurse="true"/>
		</svn>

		<general.propertyCondition property="svn.externals.hasAnyExternals" equals="true">
			<general.arrayLoop array="externalPaths" elementProperty="path" indexProperty="index">

				<general.getArrayElement array="externalValues" index="${index}" property="externalPattern"/>
				<general.messageFormat pattern="${externalPattern}" property="externalValue" array="-r${svn.repository.headRevision}"/>

				<svn>
					<propdel path="${path}" name="svn:externals" />
					<propset path="${path}" name="svn:externals" value="${externalValue}" />
				</svn>

			</general.arrayLoop>
		</general.propertyCondition>

	</target>

	<target name="setExternalsToHeadRevision">

		<general.initArray name="externalPaths"
		                  file="${svn.externals.paths.File}"
		                  separator="${svn.externals.paths.separator}"
		                  trimValues="true"
		                  arrayLengthProperty="svn.externals.count"
		                  removeEmptyValues="true"/>

		<general.initArray name="externalValues"
		                  file="${svn.externals.values.File}"
		                  separator="${svn.externals.values.separator}"
		                  trimValues="true"
		                  removeEmptyValues="true"/>

		<condition property="svn.externals.hasAnyExternals"
		           value="false"
		           else="true">
			<equals arg1="${svn.externals.count}" arg2="0"/>
		</condition>

		<svn username="${svn.username}" password="${svn.password}">
			<update dir="${svn.checkout.rootDirectory}/${svn.checkout.MainModule}" recurse="true"/>
		</svn>

		<general.propertyCondition property="svn.externals.hasAnyExternals" equals="true">
			<general.arrayLoop array="externalPaths" elementProperty="path" indexProperty="index">

				<general.getArrayElement array="externalValues" index="${index}" property="externalPattern"/>
				<general.messageFormat pattern="${externalPattern}" property="externalValue" array=""/>

				<svn>
					<propdel path="${path}" name="svn:externals" />
					<propset path="${path}" name="svn:externals" value="${externalValue}" />
				</svn>

			</general.arrayLoop>
		</general.propertyCondition>
		
	</target>

	<target name="commitProject">

		<svn username="${svn.username}" password="${svn.password}">
			<commit dir="${svn.checkout.rootDirectory}/${svn.checkout.MainModule}" recurse="true" message="${svn.commitComment}"/>
		</svn>
		
	</target>

	<target name="setNewVersionLabel">
		<antcall target="setExternalsToCurrentRevision"/>
		<antcall target="commitProject">
			<param name="svn.commitComment" value="${svn.newVersionLabel}"/>
		</antcall>

		<antcall target="setExternalsToHeadRevision"/>
		<antcall target="commitProject">
			<param name="svn.commitComment" value="${svn.externals.HeadVersionLabel}"/>
		</antcall>
	</target>

</project>
