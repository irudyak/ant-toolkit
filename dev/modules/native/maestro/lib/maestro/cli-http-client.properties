## HTTP client parameters
## See http://hc.apache.org/httpcomponents-client-ga/tutorial/html/
## Do not change anything or even delete this file to use default values.

# Defines the socket timeout (<code>SO_TIMEOUT</code>) in milliseconds,
# which is the timeout for waiting for data  or, put differently,
# a maximum period inactivity between two consecutive data packets).
# A timeout value of zero is interpreted as an infinite timeout.
# This parameter expects a value of type {@link Integer}.
# @see java.net.SocketOptions#SO_TIMEOUT
http.socket.timeout=

# Determines whether Nagle's algorithm is to be used. The Nagle's algorithm
# tries to conserve bandwidth by minimizing the number of segments that are
# sent. When applications wish to decrease network latency and increase
# performance, they can disable Nagle's algorithm (that is enable
# TCP_NODELAY). Data will be sent earlier, at the cost of an increase
# in bandwidth consumption.
# This parameter expects a value of type {@link Boolean}.
# @see java.net.SocketOptions#TCP_NODELAY
http.tcp.nodelay=

# Determines the size of the internal socket buffer used to buffer data
# while receiving / transmitting HTTP messages.
# This parameter expects a value of type {@link Integer}.
http.socket.buffer-size=

# Sets SO_LINGER with the specified linger time in seconds. The maximum
# timeout value is platform specific. Value <code>0</code> implies that
# the option is disabled. Value <code>-1</code> implies that the JRE
# default is used. The setting only affects the socket close operation.
# This parameter expects a value of type {@link Integer}.
# @see java.net.SocketOptions#SO_LINGER
http.socket.linger=

# Defines whether the socket can be bound even though a previous connection is
# still in a timeout state.
# This parameter expects a value of type {@link Boolean}.
# @see java.net.Socket#setReuseAddress(boolean)
# @since 4.1
http.socket.reuseaddr=

# Determines the timeout in milliseconds until a connection is established.
# A timeout value of zero is interpreted as an infinite timeout.
# Please note this parameter can only be applied to connections that
# are bound to a particular local address.
# This parameter expects a value of type {@link Integer}.
http.connection.timeout=

# Determines whether stale connection check is to be used. The stale
# connection check can cause up to 30 millisecond overhead per request and
# should be used only when appropriate. For performance critical
# operations this check should be disabled.
# This parameter expects a value of type {@link Boolean}.
http.connection.stalecheck=

# Determines the maximum line length limit. If set to a positive value,
# any HTTP line exceeding this limit will cause an IOException. A negative
# or zero value will effectively disable the check.
# This parameter expects a value of type {@link Integer}.
http.connection.max-line-length=

# Determines the maximum HTTP header count allowed. If set to a positive
# value, the number of HTTP headers received from the data stream exceeding
# this limit will cause an IOException. A negative or zero value will
# effectively disable the check.
# This parameter expects a value of type {@link Integer}.
http.connection.max-header-count=

# Defines the size limit below which data chunks should be buffered in a session I/O buffer
# in order to minimize native method invocations on the underlying network socket.
# The optimal value of this parameter can be platform specific and defines a trade-off
# between performance of memory copy operations and that of native method invocation.
# This parameter expects a value of type {@link Integer}.
# @since 4.1
http.connection.min-chunk-limit=

# Defines the {@link ProtocolVersion} used per default.
# Default: HttpVersion.HTTP_1_1
# Set http.protocol.version.major=1, http.protocol.version.minor=1 for HTTP_1_1
# This parameter expects a value of type {@link Integer}.
http.protocol.version.major=
# This parameter expects a value of type {@link Integer}.
http.protocol.version.minor=

# Defines the charset to be used for encoding HTTP protocol elements.
# This parameter expects a value of type {@link String}.
http.protocol.element-charset=

# Defines the charset to be used per default for encoding content body.
# This parameter expects a value of type {@link String}.
http.protocol.content-charset=

# Defines the content of the <code>User-Agent</code> header.
# This parameter expects a value of type {@link String}.
http.useragent=

# Defines the content of the <code>Server</code> header.
# This parameter expects a value of type {@link String}.
http.origin-server=

# Defines whether responses with an invalid <code>Transfer-Encoding</code>
# header should be rejected.
# This parameter expects a value of type {@link Boolean}.
http.protocol.strict-transfer-encoding=

# Activates 'Expect: 100-Continue' handshake for the
# entity enclosing methods. The purpose of the 'Expect: 100-Continue'
# handshake is to allow a client that is sending a request message with
# a request body to determine if the origin server is willing to
# accept the request (based on the request headers) before the client
# sends the request body.
# The use of the 'Expect: 100-continue' handshake can result in
# a noticeable performance improvement for entity enclosing requests
# (such as POST and PUT) that require the target server's
# authentication.
# 'Expect: 100-continue' handshake should be used with
# caution, as it may cause problems with HTTP servers and
# proxies that do not support HTTP/1.1 protocol.
# This parameter expects a value of type {@link Boolean}.
http.protocol.expect-continue=

# Defines the maximum period of time in milliseconds the client should spend
# waiting for a 100-continue response.
# This parameter expects a value of type {@link Integer}.
http.protocol.wait-for-continue=

# Defines the class name of the default {@link org.apache.http.conn.ClientConnectionManager}
# This parameter expects a value of type {@link String}.
http.connection-manager.factory-class-name=

# Defines whether redirects should be handled automatically
# This parameter expects a value of type {@link Boolean}.
http.protocol.handle-redirects=

# Defines whether relative redirects should be rejected. HTTP specification
# requires the location value be an absolute URI.
# This parameter expects a value of type {@link Boolean}.
http.protocol.reject-relative-redirect=

# Defines the maximum number of redirects to be followed.
# The limit on number of redirects is intended to prevent infinite loops.
# This parameter expects a value of type {@link Integer}.
http.protocol.max-redirects=

# Defines whether circular redirects (redirects to the same location) should be allowed.
# The HTTP spec is not sufficiently clear whether circular redirects are permitted,
# therefore optionally they can be enabled
# This parameter expects a value of type {@link Boolean}.
http.protocol.allow-circular-redirects=

# Defines whether authentication should be handled automatically.
# This parameter expects a value of type {@link Boolean}.
http.protocol.handle-authentication=

# Defines the name of the cookie specification to be used for HTTP state management.
# This parameter expects a value of type {@link String}.
http.protocol.cookie-policy=

# Defines the virtual host name to be used in the <code>Host</code>
# request header instead of the physical host name.
# This parameter expects a value of type {@link String}.
# {@link String} value will be converted to {@link org.apache.http.HttpHost}
# using HttpHost constructor: "new HttpHost(stringValue)".
http.virtual-host=

# Defines the default host. The default value will be used if the target host is
# not explicitly specified in the request URI.
# This parameter expects a value of type {@link String}.
# {@link String} value will be converted to {@link org.apache.http.HttpHost}
# using HttpHost constructor: "new HttpHost(stringValue)".
http.default-host=

# Defines the charset to be used when encoding
# {@link org.apache.http.auth.Credentials}.
# This parameter expects a value of type {@link String}.
http.auth.credential-charset=

# Defines whether cookies should be forced into a single
# <code>Cookie</code> request header. Otherwise, each cookie is formatted
# as a separate <code>Cookie</code> header.
# This parameter expects a value of type {@link Boolean}.
http.protocol.single-cookie-header=

# Defines the maximum number of ignorable lines before we expect
# a HTTP response's status line.
# With HTTP/1.1 persistent connections, the problem arises that
# broken scripts could return a wrong Content-Length
# (there are more bytes sent than specified).
# Unfortunately, in some cases, this cannot be detected after the
# bad response, but only before the next one.
# So HttpClient must be able to skip those surplus lines this way.
# This parameter expects a value of type {@link Integer}.
# 0 disallows all garbage/empty lines before the status line.
# Use {@link java.lang.Integer#MAX_VALUE} for unlimited number.
http.connection.max-status-line-garbage=

# Parameter for the default proxy.
# The default value will be used by some
# {@link org.apache.http.conn.routing.HttpRoutePlanner HttpRoutePlanner}
# implementations, in particular the default implementation.
# This parameter expects a value of type {@link String}.
# {@link String} value will be converted to {@link org.apache.http.HttpHost}
# using HttpHost constructor: "new HttpHost(stringValue)".
http.route.default-proxy=

# Parameter for the local address.
# On machines with multiple network interfaces, this parameter
# can be used to select the network interface from which the
# connection originates.
# It will be interpreted by the standard
# {@link org.apache.http.conn.routing.HttpRoutePlanner HttpRoutePlanner}
# implementations, in particular the default implementation.
# This parameter expects a value of type {@link String}.
# {@link String} value will be converted to {@link java.net.InetAddress}
# using InetAddress.getByName(stringValue);
http.route.local-address=


